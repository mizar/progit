# 使い始める #

この章は Git を使い始めることについてになります。最初にバージョン管理ツールにおけるいくつかの背景を説明することから始め、次にどのように Git をシステム上で稼動させるかに移り、最後は Git で作業を始めるためどのように設定するかです。この章のおわりにおいて、あなたはなぜ Git が広まっているのか、なぜ Git を使うべきなのか、そしてそうするための準備が全て整っているのを理解するはずです。

## バージョン管理に関して ##

バージョン管理とは何か、そしてなぜ気にするべきなのか。バージョン管理とは、変更を1つのファイル、もしくは時間を通じたファイルの集合に記録するシステムで、そのため後で特定バージョンを呼び出すことができます。現実にはコンピュータ上のほとんどあらゆるファイルのタイプでバージョン管理を行なうことができますが、本書の中の例では、バージョン管理されるファイルとして、ソフトウェアのソースコードを利用します。

もしあなたが、グラフィックス・デザイナ、もしくはウェブ・デザイナであって、(あなたが最も確実に望んでいるであろう) 画像もしくはレイアウトの全てのバージョンを管理したいのであれば、バージョン管理システム (VCS) はとても賢く利用できるものです。それは、ファイルを以前の状態まで戻し、プロジェクト丸ごとを以前の状態に戻し、時間を通じた変化を比較し、誰が最後に問題を引き起こしているかも知れない何かを修正したか、誰が課題を導入したかそしていつなのか、それ以上を可能にします。VCS を使うことはまた、一般的に、何かをもみくちゃにするか、ファイルを失うとしても、簡単に復活させることができることを意味します。加えて、とても僅かな諸経費で、それら全てを得ることができます。

### ローカル・バージョン管理システム ###

多くの人々の選り抜きのバージョン管理手法は、他のディレクトリ (もし彼らが賢いのであれば、恐らく日時が書かれたディレクトリ) にファイルをコピーするというものです。このアプローチは、とても単純なためにとても一般的ですが、また信じられないほどに間違いがちです。どのディレクトリにいるのか忘れやすいですし、偶然に間違ったファイルに書き込んだり、意図しないファイルに上書きしたりします。

この問題に対処するため、大昔にプログラマは、リビジョン管理下で全ての変更をファイルに保持する単純なデータベースを持つ、ローカルな VCS を開発しました (図 1-1 参照)。

Insert 18333fig0101.png 
図 1-1. ローカル・バージョン管理図解

もっとも有名な VCS ツールの1つが、rcs と呼ばれるシステムでした。今日でも依然として多くのコンピュータに入っています。人気の Mac OS X オペレーティング・システムさえも、開発者ツールをインストールしたときは、rcs コマンドを含みます。このツールは基本的に、ディスク上に特殊フォーマットで、1つの変更からもう1つの変更へのパッチ (これはファイル間の差分です) の集合を保持することで稼動します。そういうわけで、全てのパッチを合計することで、あらゆる時点で、あらゆるファイルがどう見えるかを再生成する事ができます。

### 集中バージョン管理システム ###

次に重要な人々が遭遇した問題は、他のシステム上の開発者と協力する必要です。この問題に対処するために、集中バージョン管理システム (CVCS) が開発されました。CVS や Subversion、Perforce のような、これらのシステムは、全てのバージョン管理されたファイルを包含する単一サーバを持ち、その中心地からファイルを借り出す複数のクライアントを持ちます。長年の間、これはバージョン管理の標準となっています (図 1-2 参照)。

Insert 18333fig0102.png 
図 1-2. 集中バージョン管理図解

この仕組みは、特にローカル VCS を超える、多くの優位性を提供します。例えば、誰でもプロジェクト上の自分以外がしているの事をある程度知っています。管理者には誰が何をできるかを覆うきめ細かい管理手段があり、全クライアント上のローカルデータベースに対処するより CVCS を管理する方がはるかに簡単です。

しかしながら、この仕組みはいくつか深刻な不利な面もあります。もっとも明白なのは、中央サーバが示す単一障害点 (SPOF) です。もしそのサーバが1時間停止すると、その1時間は誰も全く協力できないか、取り組んでいる全てへのバージョン管理された変更の保存ができません。もし中央データベースが載っているハードディスクが破損し、適切なバックアップが保持されていないと、無条件に全てを失います。全てとは、人々が偶然にローカル・マシンに持っていたいくつかの単一スナップショットを除いたプロジェクトの全体履歴です。ローカル VCS システムはこれと同じ問題に悩まされます。単一の場所にプロジェクトの全体履歴があるときはいつでも、全てを失う事を覚悟することになります。

### 分散バージョン管理システム ###

これは分散バージョン管理システム (DVCS) に足を踏み入れるところです。DVCS (Git や Mercurial、Bazaar、Darcs のような) では、クライアントはファイルの最新スナップショットをただ借り出すだけではありません。リポジトリを完全に反映します。故にどのサーバが死んでも、そして DVCS を介して共同作業をしていても、クライアント・リポジトリのどれかが復旧するサーバのコピーされたバックアップとなりえます。全ての checkout は本当に全データの完全バックアップなのです (図 1-3)。

Insert 18333fig0103.png 
図 1-3. 分散バージョン管理システム図解

加えて、これら DVCS の多くが、連携可能な複数のリモート・リポジトリを持ちながら実に上手く機能し、そのため同じプロジェクトの中で、同時に異なる方法で異なるグループと協力できます。これは階層型モデルのような集中システムでは不可能な数種類の作業手順をセットアップ可能にします。

## Git の略歴 ##

人生における多くの素晴らしい出来事のように、Git はわずかな創造的破壊と情熱的論争から始まりました。Linux カーネルは極めて広範囲のオープンソース・ソフトウェア・プロジェクトです。Linux カーネル・メンテナンスの存続期間のほとんど (1991-2002年) で、ソフトウェアへの変更はパッチとして配布されファイルに保管されました。2002年、Linux カーネル・プロジェクトはプロプライエタリの DVCS である BitKeeper を使い始めました。

2005年、Linux カーネルを開発したコミュニティと BitKeeper を開発した営利会社との関係が砕け、BitKeeper の無償利用が取り消されました。これは Linux 開発コミュニティ(と特に Linux 開発者 Linus Torvalds)に、BitKeeper から得た教訓を踏まえた専用のツール開発を促しました。新たなシステムのゴールにすえられたもののうちいくつかは以下の通りです:

*	スピード
*	シンプル・デザイン
*	ノンリニア開発(数千の並列ブランチ)への強力なサポート
*	完全な分散型
*	Linux カーネルのような大規模プロジェクトを(スピードとデータサイズで)効率的に処理可能

2005年に誕生してから、Git はその使いやすさとこれら基本品質を保持しながら発展しています。驚くほど早く、大規模プロジェクトでとても効率的で、驚くべきブランチ・システムをノンリニア開発に与えています(第3章参照).

## Git の基本 ##

では、小さな容器の中で Git は何なのでしょう。これは理解すべき重要な部分です。Git とは何か、そして基本的動作を理解すれば、Git を効果的に使うのがより簡単になるはずです。Git 学習のため、Subversion や Perforce など他の VCS は忘れて下さい。これはこのツールを使うときの混乱を避けるのに役立ちます。Git の情報の格納方法と考え方は他 VCS と大きく異なります。そうでありながらユーザインタフェースはかなり似ています。これら違いを理解することが使用時の混乱を防ぎます.

### スナップショット != 相違 ###

Git と他の VCS (Subversion とその類を含む)の代表的な相違は、Git のデータについての考え方です。概念的に、他システムのほとんどが情報をファイルごとの変更のリストとして格納します。これらシステム(CVS, Subversion, Perforce, Bazaar 等々)はシステムが保持するファイル群と各ファイルの時間ごとの変更を考えます。図1-4に表しました.

Insert 18333fig0104.png 
図1-4. 他システムはデータを各ファイルの元となるバージョンへの変更として格納します.

Git は考え方もデータ格納方法も上記とは異なります。代わりに Git は データをミニ・ファイルシステムのスナップショット群のように考えます。コミットする度、Git でプロジェクトの状態を保存する度, 全てのファイルがどのように見えるか, その瞬間の写真を撮るのです。そしてそのスナップショットへの参照を格納します。効果的にするため, そのファイルは変更されません。Git は2度とそのファイルを格納しません。ちょうど以前の識別可能な格納済みファイルへのリンクのようなものです。Git はデータを図1-5のように考えます.

Insert 18333fig0105.png 
図1-5. Git は時間とともにプロジェクトのスナップショットをデータとして格納します.

これは Git と ほぼそれ以外全ての VCS における相違です。 Git はほぼ全ての面で, 過去の世代からコピーされたほとんどのバージョン管理システムを見直しています。これは Git をミニ・ファイルシステムとその上に組み上げられた驚くほど力強いツールとしています。ただの VCS 以上のものにです。第3章, Git ブランチを扱う時, データに対するこの考え方で得られる利益を見出せるでしょう.

### ほぼ全ての操作はローカル ###

Git のほとんどの操作はローカルファイルと操作のためのリソースだけで十分です。基本的にネットワーク上の他コンピュータから情報は必要ありません。ほとんどの操作を呼び出し時間のオーバヘッドがあるネットワークで行う集中型バージョン管理に慣れていると, この面で Git は, この世のものでない, 神に祝福をされたスピードだと思えるでしょう。これはプロジェクト全体の履歴を目前のコンピュータが全て持っているからに他なりません。ほとんどの操作が一瞬に感じられます.

例えば, プロジェクトの履歴を参照するのに, Git はサーバにアクセスして履歴を取得する必要がありません。単純にローカルデータベースを直接参照します。つまりプロジェクトの履歴をほぼ即座に確認できます。現バージョンのファイルと1ヶ月前の変更を確認したければ, Git は1ヶ月前のファイルを検索しローカルで相違の確認が出来ます。サーバに相違の確認を問い合わせる必要も古いバージョンをサーバから入手してローカルで確認する手間もありません.

つまるところ, オフラインや VPN に接続していないコンピュータで何も出来ないわけではありません。飛行機や電車で作業したい場合, どこかでネットワーク接続するまでコミットを続けられます。もし自宅で VPN クライアントが正常に動作しなくても, 作業は続けられます。多くの他システムでこれは不可能か現実的ではありません。Perforce では例えばネットワーク接続がないと大したことができません。Subversion と CVS ではファイルの編集は出来ますが変更のコミットをデータベースに反映できません(データベースに接続できないので)。これは大きな問題ではないかも知れません。しかし Git のもたらす大きな利点には驚いたのではないでしょうか.

### Git は誠実です ###

Git のリソースは全て, 格納前と参照前にチェックサムが実施されます。つまり Git に感知されずにファイルやディレクトリに変更を加えることは不可能です。これは根本的な機能として組み込まれ, Git の哲学にもなっています。情報伝達を失うこともファイルを破壊することも, Git 抜きでは不可能です.

Git の用いるこのチェックサム・メカニズムは SHA-1 ハッシュです。これは40文字からなる16進数(0-9 と a-f)と ファイルの中身や Git のディレクトリ構造を計算した物を基本としています。SHA-1 ハッシュは下記のようなものです:

	24b9da6552252987aa493b52f8696cd6d3b00373

Git の中ではこのようなハッシュをいたるところで目にするでしょう。実際, Git は全てをファイル名でなく, ファイルの内容をハッシュ値でデータベースに記録します.

### Git は通常データだけを追加します ###

Git で行動するとき, それらのほとんど全ては Git データベースへデータを追加するだけです。する事全部を元に戻せないかどんな方法でもデータを消去するシステムを手に入れるのはとても大変です。何故ならどんな VCS でも, まだコミットしていない変更を失ったり台無しにするかも知れないのです。しかし Git にスナップショットをコミットした後では, 失うのは非常に難しく, 特に定期的にデータベースを他のリポジトリにプッシュしている場合は尚更です.

事を深刻なまでに台無しにする危険抜きで実験できるのを知っているので, これは Git の使用を喜びに変えてくれます。Git がどのように自身のデータを格納し失われたかに見えるデータを復旧するかのより多くの熟慮された観点は, 第9章の“Under the Covers”をご覧下さい.

### 3つの状態 ###

今, 注目して下さい。残りの学習過程をすらすらと行きたいならこれは Git について覚える主なことです。Git はファイルが属せる主な3つの状態があります。コミット, 修正, ステージです。コミットは, データは安全にローカルデータベースに格納されたという意味です。修正は, ファイルを変更したがまだデータベースにコミットされていないという意味です。ステージは, 次のコミット・スナップショットへ行く現在のバージョンの修正ファイルに印を付けるという意味です.

これは Git プロジェクトの3主部門へ導きます。Git ディレクトリ, ワーク・ディレクトリ, ステージ・エリアです.

Insert 18333fig0106.png 
図 1-6. ワーク・ディレクトリ, ステージ・エリア, Git ディレクトリ

Git ディレクトリとは, Git がどこにプロジェクト用のメタデータとオブジェクトデータベースを格納するかです. これは Git の最も重要な部分で, 別のコンピュータからリポジトリをクローンした時何がコピーされるかです.

ワーク・ディレクトリとは, プロジェクト内のあるバージョンの単一チェックアウトです. これらファイルは Git ディレクトリの圧縮データベースから除かれて使用・編集のためディスク上に置かれたものです.

ステージ・エリアとは, 単純なファイルで, 通常 Git ディレクトリに格納されており, それは次のコミットに何が来るかについて情報を持っています. それは時々インデックスとして参照されますが, それをステージ・エリアとして参照するのが標準となってきています.

基本 Git ワークフローはこのようになります:

1. ワーク・ディレクトリのファイルを編集します.
2． ファイルをステージして, そのスナップショットをステージ・エリアに追加します.
3. コミットして, それはファイルをステージ・エリア内のものとして取り, Git ディレクトリへ恒久的にスナップショットを格納します. 

ファイルの特定のバージョンが Git ディレクトリにあるなら, コミットされたと考えられます. それが編集されているがステージ・エリアに追加されているなら, ステージされています. そしてそれがチェックアウトされステージされていない状態から変更されたなら, 編集されています. 第2章で, これら状態についてより多く学ぶでしょう. そしてそれらをどのように利用するかどのようにステージ部分を全て省略するか学ぶでしょう.

## Git のインストール ##

Git 使用に乗り込みましょう. 真っ先にやるべきは最も重要な事です. Git をインストールする必要があります. 複数の方法から1つ選ぶことが出来ます. 主流の2つはソースからインストールするかプラットフォーム向け既存パッケージをインストールするかです.

### ソースからインストール ###

出来れば, ソースから Git をインストールするのが通常は便利です. 何故なら最も最近のバージョンを入手するでしょうから. Git の各バージョンは便利な UI 付加を内包する傾向にあります. ですから最新バージョンを入手するのはソースからソフトウェアをコンパイルするのが気楽なら大抵最良の道筋です. 多くの Linux ディストリビューションはとても古いパッケージを内包している場合もあります. ですから更新頻度の高いディストリビューションかバックポートを使用しない限り, ソースからインストールするのが最良策かも知れません.

Git をインストールするため, 次に挙げる依存ライブラリが必要です: curl, zlib, openssl, expat, libiconv. 例えば, yum (Fedora 等) や apt-get (Debian 系システム) を使用しているなら, 全依存関係をインストールするのにこれらコマンドの1つを使えます:

	$ yum install curl-devel expat-devel gettext-devel \
	  openssl-devel zlib-devel

	$ apt-get install curl-devel expat-devel gettext-devel \
	  openssl-devel zlib-devel
	
全ての必要依存関係を入手した時, 続けて最新スナップショットを Git の Web サイトから取ってくることが出来ます:

	http://git-scm.com/download
	
そして, コンパイルしてインストールします:

	$ tar -zxf git-1.6.0.5.tar.gz
	$ cd git-1.6.0.5
	$ make prefix=/usr/local all
	$ sudo make prefix=/usr/local install

これが終わったら, Git 自身を介してアップデートを入手することも出来ます:

	$ git clone git://git.kernel.org/pub/scm/git/git.git
	
### Linux 上のインストール ###

Linux 上でバイナリインストーラを介して Git をインストールしたいなら, ディストリビューション付属の基本的なパッケージ管理ツールで通常出来ます. Fedora 上なら, yum を使えます:

	$ yum install git-core

もしくは Ubuntu のような Debian 系ディストリビューション上なら, apt-get を試して下さい:

	$ apt-get install git-core

### Mac 上のインストール ###

Mac 上で Git をインストールする2つの簡単な方法があります. 最も簡単なのはグラフィカル Git インストーラです. これは Google Code ページからダウンロード出来ます(図1-7参照):

	http://code.google.com/p/git-osx-installer

Insert 18333fig0107.png 
図1-7. Git OS X インストーラ

その他主要な方法は MacPorts (`http://www.macports.org`) を介してインストールする事です.

	$ sudo port install git-core +svn +doc +bash_completion +gitweb

余分なもの全てを追加する必要はありません. しかしおそらく +svn はいつか Subversion リポジトリで Git を使用する必要に備えて追加したいでしょう(8章参照).

### Windows 上のインストール ###

Windows 上の Git インストールはとても簡単です. msysGit プロジェクトはより簡単なインストール方法の1つです. 単に exe ファイルインストーラを Google Code ページよりダウンロードして, 走らせるだけです:

	http://code.google.com/p/msysgit

インストールされた後, コマンドラインバージョン(後々何かと便利な SSH クライアントを含んでいます)と標準 GUI の両方があります.

## Git の初期設定 ##

システム上に Git がある今, 幾らか Git 環境をカスタマイズしたいでしょう. これらの事は1度だけに留めるべきです. それらはアップグレード間をついて回ります. またいつでもコマンド実行する事でそれらを再度変更できます.

Git は git config というツールが付属しており, これは Git がどのように見え作用するするかの全局面を管理する構成値の取得と設定をします. これら構成値は3つの異なる場所に格納される可能性があります:

*	`/etc/gitconfig` ファイル: システム上の全ユーザとそれら全てのリポジトリの値を格納します. 具体的には, オプション ` --system` を `git config` に渡せば, このファイルから読み書きします.
*	`~/.gitconfig` ファイル: ユーザを特定します. `--global` オプションを渡す事で Git にこのファイルに特定して読み書きさせることができます.
*	現在作業中のリポジトリ内 git ディレクトリの config ファイル(つまり `.git/config`): 単一リポジトリを特定します. 各レベルがその前のレベル値を上書きします. つまり `.git/config` の値は `/etc/gitconfig` 内の値に勝ります.

Windows システム上で, Git は `$HOME` ディレクトリ内の `.gitconfig` ファイル(多くの場合は `C:\Documents and Settings\$USER`) を探します. また Msys ルートに関係のある /etc/config も探します. これはインストーラを実行するときに Windows 上のどこでも指定したインストール先です.

### あなたの ID ###

Git をインストールしたら最初にすべきはユーザ名とEメールアドレスの設定です. これは重要です. 何故なら毎回 Git コミットはこの情報を使い, 以下のように渡したコミットに不変的に焼き付けるからです:

	$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com

もう1度, `--global` オプションを渡すなら1度きりにする必要があります. 何故なら Git は毎回その情報をそのシステム上でする全ての事に使うからです. 異なる名前やEメールアドレスを特定のプロジェクト用に上書きしたいなら, プロジェクト内にいる時 `--global` オプション抜きでコマンドを実行することが出来ます.

### あなたのエディタ ###

あなたの ID が設定された今, Git がメッセージを入力してほしい時に使用される標準のテキストエディタを設定できます. 標準では, Git はシステムの標準エディタを使用します. これは通常 Vi か Vim です. 異なるテキストエディタとして Emacs などを使いたいなら, 以下の通り出来ます:

	$ git config --global core.editor emacs
	
### あなたの Diff ツール ###

もう１つ便利なオプションで設定したい可能性があるのが merge 衝突の解決に使用する標準の Diff ツールです. vimdiff を使いたいなら:

	$ git config --global merge.tool vimdiff

Git は kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge, そして opendiff を有効な merge ツールとして受け入れます. またカスタムツールも設定できます. それをするより多くの情報のため第7章をご覧ください.

### 設定の確認 ###

設定を確認したいなら, その時点で Git が発見できる全設定をリスト化する `git config --list` コマンドを使えます:

	$ git config --list
	user.name=Scott Chacon
	user.email=schacon@gmail.com
	color.status=auto
	color.branch=auto
	color.interactive=auto
	color.diff=auto
	...

1つの設定事項に対して1度以上参照することがあります. 何故なら Git は 設定事項1つにつき複数のファイル(例えば `/etc/gitconfig` と `~/.gitconfig` 等)を読むからです. 上記の場合, Git は各々の設定事項が参照する最後の値を使用しています.

また Git が特定の設定事項の値が何であるか `git config {設定事項}` と入力することで確認できます:

	$ git config user.name
	Scott Chacon

## ヘルプの参照 ##

Git 使用中にヘルプが必要になった事があるなら, 全 Git コマンドのマニュアルページ (manpage) ヘルプを得る3つの方法があります:

	$ git help <verb>
	$ git <verb> --help
	$ man git-<verb>

例えば, config コマンドの manpage ヘルプを得るには以下を実行します:

	$ git help config

これらコマンドは親切です. 何故ならどこからでも, オフラインでさえもアクセス出来ます.
manpage やこの本が充分でなく人の助けが必要なら, Freenode IRC (irc.freenode.net) の `#git` や `#github` チャンネルを試してみることも可能です. これらチャンネルはたびたび Git に精通し大抵手助けの意志のある数百の人々で埋め尽くされます.

## まとめ ##

Git とは何かそして今まで使ってきたかも知れない CVCS とどう違うのかの基本的な理解をしたはずです. またあなた個人の ID を設定した Git が今システム上で動いているはずです. 今から Git 基礎学習の時間です.
